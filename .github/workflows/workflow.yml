name: ParaCL CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  build-test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        compiler: [gcc-11, gcc, clang]
        build_type: [Release, Debug]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python and install Conan globally
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: |
          python -m pip install --upgrade pip
          pip install conan

      - name: Create default Conan profile
        run: conan profile detect --force

      - name: Install dependencies with Conan
        run: |
          if [ "${{ matrix.build_type }}" == "Debug" ]; then
            conan install . --output-folder=third_party --build=missing -s build_type=Debug
          else
            conan install . --output-folder=third_party --build=missing -s build_type=Release
          fi

      # Install Bison and Flex
      - name: Install Bison and Flex
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y bison flex

      # Ubuntu compiler setup
      - name: Set up compiler (Ubuntu GCC 11)
        if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc-11'
        run: |
          sudo apt update
          sudo apt install -y g++-11
        env:
          CC: gcc-11
          CXX: g++-11

      - name: Set up compiler (Ubuntu Clang)
        if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang'
        run: |
          sudo apt update
          sudo apt install -y clang
        env:
          CC: clang
          CXX: clang++

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE=./third_party/conan_toolchain.cmake

      - name: Build with CMake
        run: cmake --build build

      - name: Run tests
        run: ctest --test-dir build --output-on-failure

